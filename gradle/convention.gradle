// GRADLE-2087 workaround, perform after java plugin
status = project.hasProperty('preferredStatus')?project.preferredStatus:(version.contains('SNAPSHOT')?'snapshot':'release')

subprojects { project ->
    apply plugin: 'java' // Plugin as major conventions

    sourceCompatibility = 1.7

    // Restore status after Java plugin
    status = rootProject.status

    task sourcesJar(type: Jar, dependsOn:classes) {
        from sourceSets.main.allSource
        classifier 'sources'
        extension 'jar'
    }

    task javadocJar(type: Jar, dependsOn:javadoc) {
        from javadoc.destinationDir
        classifier 'javadoc'
        extension 'jar'
    }

    configurations.add('sources')
    configurations.add('javadoc')
    configurations.archives {
        extendsFrom configurations.sources
        extendsFrom configurations.javadoc
    }

    artifacts {
        sources(sourcesJar) {
            // Weird Gradle quirk where type will be used for the extension, but only for sources
            type 'jar'
        }
        javadoc(javadocJar) {
            type 'javadoc'
        }
    }

    configurations {
        provided {
            description = 'much like compile, but indicates you expect the JDK or a container to provide it. It is only available on the compilation classpath, and is not transitive.'
            transitive = true
            visible = true
        }
    }

    project.sourceSets {
        main.compileClasspath += project.configurations.provided
        main.runtimeClasspath -= project.configurations.provided
        test.compileClasspath += project.configurations.provided
        test.runtimeClasspath += project.configurations.provided
    }

    tasks.withType(Test) {
        testLogging.showStandardStreams = true

        // listen to events in the test execution lifecycle
        beforeTest { descriptor ->
            logger.lifecycle(":" + descriptor)
        }
    }

    task itest(type: Test) {
        description = 'Runs integration tests (test classes ending in ITest).'
        include "**/*ITest*"
    }
    itest.dependsOn(cleanItest)

    //http://www.gradle.org/docs/current/dsl/org.gradle.api.tasks.testing.Test.html
    test {
        exclude "**/*ITest*"
        minHeapSize = "128m"
        maxHeapSize = "512m"
        jvmArgs '-XX:MaxPermSize=256m'
    }

    task listCache << {
        description = 'Prints all items in all Configurations (extends FileCollection), representing all artifacts and their dependencies.'
        configurations.compile.each { println it }
    }

    task listJars << {
        description = 'Prints the JAR files from all Configurations.'
        configurations.compile.each { File file -> println file.name }
    }

}

// Generate wrapper, which is distributed as part of source to alleviate the need of installing gradle
task createWrapper(type: Wrapper) {
    gradleVersion = '1.5'
}
